From 5224e38fa33ca027d7bbf5a7f9f500446d0bd517 Mon Sep 17 00:00:00 2001
From: Max Ihlenfeldt <max@igalia.com>
Date: Thu, 31 Aug 2023 10:27:47 +0000
Subject: [PATCH] Fix "constexpr variable cannot have non-literal type" errors

Older clang versions don't consider some types to be literal types,
contrary to the version upstream uses. This means they can't be used in
constexpr expressions or as return types of constexpr functions. We need
to change these expressions/functions to be const instead.

Upstream-Status: Inappropriate [specific to older versions of clang]
Signed-off-by: Max Ihlenfeldt <max@igalia.com>
---
 .../core/browser/data_model/autofill_i18n_api.h      |  4 ++--
 .../generic_sensor/frame_sensor_provider_proxy.cc    |  2 +-
 ui/base/wayland/color_manager_util.h                 | 12 ++++++------
 3 files changed, 9 insertions(+), 9 deletions(-)

diff --git a/components/autofill/core/browser/data_model/autofill_i18n_api.h b/components/autofill/core/browser/data_model/autofill_i18n_api.h
index cf604d5..b7a5f77 100644
--- a/components/autofill/core/browser/data_model/autofill_i18n_api.h
+++ b/components/autofill/core/browser/data_model/autofill_i18n_api.h
@@ -15,8 +15,8 @@ namespace autofill::i18n_model_definition {
 // Country code that represents autofill's legacy address hierarchy model as
 // stored `kAutofillModelRules`. As a workaround for GCC we declare the
 // std::string constexpr first.
-constexpr inline std::string kLegacyHierarchyCountryCodeString{"XX"};
-constexpr AddressCountryCode kLegacyHierarchyCountryCode =
+const inline std::string kLegacyHierarchyCountryCodeString{"XX"};
+const AddressCountryCode kLegacyHierarchyCountryCode =
     AddressCountryCode(kLegacyHierarchyCountryCodeString);

 // Creates an instance of the address hierarchy model corresponding to the
diff --git a/content/browser/generic_sensor/frame_sensor_provider_proxy.cc b/content/browser/generic_sensor/frame_sensor_provider_proxy.cc
index b8f0b48..e24c144 100644
--- a/content/browser/generic_sensor/frame_sensor_provider_proxy.cc
+++ b/content/browser/generic_sensor/frame_sensor_provider_proxy.cc
@@ -20,7 +20,7 @@ namespace content {

 namespace {

-constexpr std::vector<blink::mojom::PermissionsPolicyFeature>
+const std::vector<blink::mojom::PermissionsPolicyFeature>
 SensorTypeToPermissionsPolicyFeatures(SensorType type) {
   switch (type) {
     case SensorType::AMBIENT_LIGHT:
diff --git a/ui/base/wayland/color_manager_util.h b/ui/base/wayland/color_manager_util.h
index 2efa825..49ec648 100644
--- a/ui/base/wayland/color_manager_util.h
+++ b/ui/base/wayland/color_manager_util.h
@@ -48,7 +48,7 @@ struct RangeVersion {
 // A map from the zcr_color_manager_v1 chromaticity_names enum values
 // representing well-known chromaticities, to their equivalent PrimaryIDs.
 // See components/exo/wayland/protocol/chrome-color-management.xml
-constexpr auto kChromaticityMap = base::MakeFixedFlatMap<
+const auto kChromaticityMap = base::MakeFixedFlatMap<
     zcr_color_manager_v1_chromaticity_names,
     PrimaryVersion>(
     {{ZCR_COLOR_MANAGER_V1_CHROMATICITY_NAMES_BT601_525_LINE,
@@ -103,7 +103,7 @@ constexpr auto kChromaticityMap = base::MakeFixedFlatMap<
 // A map from the zcr_color_manager_v1 eotf_names enum values
 // representing well-known EOTFs, to their equivalent TransferIDs.
 // See components/exo/wayland/protocol/chrome-color-management.xml
-constexpr auto kEotfMap = base::MakeFixedFlatMap<
+const auto kEotfMap = base::MakeFixedFlatMap<
     zcr_color_manager_v1_eotf_names,
     TransferVersion>({
     {ZCR_COLOR_MANAGER_V1_EOTF_NAMES_LINEAR,
@@ -174,7 +174,7 @@ constexpr auto kEotfMap = base::MakeFixedFlatMap<
 // A map from the SDR zcr_color_manager_v1 eotf_names enum values
 // representing well-known EOTFs, to their equivalent transfer functions.
 // See components/exo/wayland/protocol/chrome-color-management.xml
-constexpr auto kTransferMap =
+const auto kTransferMap =
     base::MakeFixedFlatMap<zcr_color_manager_v1_eotf_names, TransferFnVersion>({
         {ZCR_COLOR_MANAGER_V1_EOTF_NAMES_LINEAR,
          TransferFnVersion(SkNamedTransferFn::kLinear, kDefaultSinceVersion)},
@@ -194,7 +194,7 @@ constexpr auto kTransferMap =
 // A map from the HDR zcr_color_manager_v1 eotf_names enum values
 // representing well-known EOTFs, to their equivalent transfer functions.
 // See components/exo/wayland/protocol/chrome-color-management.xml
-constexpr auto kHDRTransferMap =
+const auto kHDRTransferMap =
     base::MakeFixedFlatMap<zcr_color_manager_v1_eotf_names, TransferFnVersion>(
         {{ZCR_COLOR_MANAGER_V1_EOTF_NAMES_LINEAR,
           TransferFnVersion(SkNamedTransferFn::kLinear, kDefaultSinceVersion)},
@@ -214,7 +214,7 @@ constexpr auto kHDRTransferMap =

 // A map from zcr_color_manager_v1 matrix_names enum values to
 // gfx::ColorSpace::MatrixIDs.
-constexpr auto kMatrixMap =
+const auto kMatrixMap =
     base::MakeFixedFlatMap<zcr_color_manager_v1_matrix_names, MatrixVersion>(
         {{ZCR_COLOR_MANAGER_V1_MATRIX_NAMES_RGB,
           MatrixVersion(gfx::ColorSpace::MatrixID::RGB, kDefaultSinceVersion)},
@@ -251,7 +251,7 @@ constexpr auto kMatrixMap =

 // A map from zcr_color_manager_v1 range_names enum values to
 // gfx::ColorSpace::RangeIDs.
-constexpr auto kRangeMap =
+const auto kRangeMap =
     base::MakeFixedFlatMap<zcr_color_manager_v1_range_names, RangeVersion>(
         {{ZCR_COLOR_MANAGER_V1_RANGE_NAMES_LIMITED,
           RangeVersion(gfx::ColorSpace::RangeID::LIMITED,
